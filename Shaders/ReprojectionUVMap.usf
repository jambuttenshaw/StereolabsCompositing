#include "/Engine/Private/Common.ush"

float4x4 VirtualCameraViewToNDC;
float4x4 VirtualCameraNDCToView;

float4x4 DepthCameraViewToNDC;
float4x4 DepthCameraNDCToView;

float DepthCameraNearClippingPlane;

float4x4 InvDepthCameraNodalOffset;


float2 ReprojectionUVMapPS(
	float2 InUV : TEXCOORD0
) : SV_Target0
{
	// Un-project into view-space
	float2 NDCSpacePos = (InUV - 0.5f) * 2.0f * float2(1, -1);

	float4 PosOnNearPlane = mul(float4(NDCSpacePos, 1, 1), VirtualCameraNDCToView);
	float3 DirToNearPlane = PosOnNearPlane.xyz / PosOnNearPlane.w;

	float3 ViewSpacePos = DirToNearPlane;

	// Apply nodal offset
	ViewSpacePos = mul(float4(ViewSpacePos, 1), InvDepthCameraNodalOffset).rgb;

	// Project back into NDC
	float4 ProjectedPos = mul(float4(ViewSpacePos, 1), DepthCameraViewToNDC);
	float3 NDCPos = ProjectedPos.xyz / ProjectedPos.w;

	float2 OutUV = (NDCPos.xy + 1.0f) * 0.5f;
	OutUV.y = 1.0f - OutUV.y;

	// Mark any UV coordinates outside of view as invalid
	if (any(OutUV < 0.0f) || any(OutUV > 1.0f))
	{
		OutUV = float2(-1, -1);
	}

	return OutUV;
}


Texture2D<float2> ReprojectionUVMap;
SamplerState sampler0;

float4 VisualizeReprojectionUVMapPS(
	float2 InUV : TEXCOORD0
) : SV_Target0
{
	return float4(ReprojectionUVMap.Sample(sampler0, InUV), 0, 1);
}
